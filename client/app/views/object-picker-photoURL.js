// Generated by CoffeeScript 1.8.0
var ObjectPickerPhotoURL, proxyclient, template,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

template = require('../templates/object-picker-photoURL')();

proxyclient = require('lib/proxyclient');

module.exports = ObjectPickerPhotoURL = (function() {
  function ObjectPickerPhotoURL(container, objectPicker) {
    this.updateCropedPreview = __bind(this.updateCropedPreview, this);
    this.onImgToCropLoaded = __bind(this.onImgToCropLoaded, this);
    this.listFromFiles_cb = __bind(this.listFromFiles_cb, this);
    this.photoUploadKeyHandler = __bind(this.photoUploadKeyHandler, this);
    this.handleFile = __bind(this.handleFile, this);
    this.handleUploaderChange = __bind(this.handleUploaderChange, this);
    this.changePhotoFromUpload = __bind(this.changePhotoFromUpload, this);
    this.handleScroll = __bind(this.handleScroll, this);
  }

  ObjectPickerPhotoURL.prototype.id = 'object-picker';

  ObjectPickerPhotoURL.prototype.title = 'pick from files';

  ObjectPickerPhotoURL.prototype.events = function() {
    return _.extend(ObjectPickerPhotoURL.__super__.events.apply(this, arguments), {
      'click    .thumbsContainer': 'validateClick',
      'dblclick .thumbsContainer': 'validateDblClick',
      'click    a.next': 'displayMore',
      'click    a.prev': 'displayPrevPage',
      'click    .chooseAgain': 'chooseAgain',
      'click    .modal-uploadBtn': 'changePhotoFromUpload',
      'change   #uploader': 'handleUploaderChange'
    });
  };

  ObjectPickerPhotoURL.prototype.initialize = function(params, cb) {
    var body;
    this.config = {
      cssSpaceName: "object-picker",
      singleSelection: true,
      numPerPage: 50,
      yes: t('modal ok'),
      no: t('modal cancel'),
      cb: cb,
      target_h: 100,
      target_w: 100
    };
    ObjectPickerPhotoURL.__super__.initialize.call(this, this.config);
    this.state = {
      currentStep: 'photoPicker',
      selected: {},
      selected_n: 0,
      skip: 0,
      percent: 0,
      img_naturalW: 0,
      img_naturalH: 0,
      uploadPopupOpened: false
    };
    body = this.el.querySelector('.modalCY-body');
    body.innerHTML = template;
    this.body = body;
    this.objectPickerCont = body.querySelector('.objectPickerCont');
    this.tablist = body.querySelector('[role=tablist]');
    this.cropper$ = this.el.querySelector('.croperCont');
    this.thumbs$ = body.querySelector('.thumbsContainer');
    this.imgToCrop = this.cropper$.querySelector('#img-to-crop');
    this.imgPreview = this.cropper$.querySelector('#img-preview');
    this.nextBtn = body.querySelector('.next');
    this.uploader = body.querySelector('#uploader');
    this.bindTabs();
    this.listenTabsSelection();
    this.selectDefaultTab('thumbPicker');
    this.bindFileDropZone();
    this.setupURL();
    this.imgToCrop.addEventListener('load', this.onImgToCropLoaded, false);
    this.cropper$.style.display = 'none';
    this.addPage(0, this.config.numPerPage);
    this.state.skip += this.config.numPerPage;
    return true;
  };

  ObjectPickerPhotoURL.prototype.setupURL = function() {
    var img, imgTmp, input, preloadImage, urlRegexp;
    img = this.body.querySelector('.url-preview');
    input = this.body.querySelector('.modal-url-input');
    urlRegexp = /\b(https?|ftp|file):\/\/[\-A-Z0-9+&@#\/%?=~_|$!:,.;]*[A-Z0-9+&@#\/%=~_|$]/i;
    imgTmp = new Image();
    imgTmp.onerror = function() {
      return img.style.backgroundImage = "";
    };
    imgTmp.onload = function() {
      img.style.maxWidth = imgTmp.naturalWidth + "px";
      img.style.maxHeight = imgTmp.naturalHeight + "px";
      img.parentElement.style.display = 'flex';
      return img.style.backgroundImage = 'url(' + imgTmp.src + ')';
    };
    preloadImage = function(src) {
      return imgTmp.src = src;
    };
    return input.addEventListener('input', function(e) {
      var newurl, url;
      newurl = input.value;
      if (urlRegexp.test(newurl)) {
        url = 'api/proxy/?url=' + encodeURIComponent(newurl);
        return preloadImage(url);
      } else {
        return img.style.backgroundImage = "";
      }
    }, false);
  };

  ObjectPickerPhotoURL.prototype.bindFileDropZone = function() {
    var dragenter, dragover, drop, dropbox, hasEnteredText;
    dropbox = this.objectPickerCont.querySelector(".modal-file-drop-zone>div");
    hasEnteredText = false;
    dropbox.addEventListener("dragenter", function(e) {
      e.stopPropagation();
      e.preventDefault();
      return dropbox.classList.add('dragging');
    }, false);
    dropbox.addEventListener("dragleave", function(e) {
      e.stopPropagation();
      e.preventDefault();
      return dropbox.classList.remove('dragging');
    }, false);
    dragenter = function(e) {
      e.stopPropagation();
      return e.preventDefault();
    };
    dragover = dragenter;
    drop = (function(_this) {
      return function(e) {
        var dt, files;
        e.stopPropagation();
        e.preventDefault();
        dt = e.dataTransfer;
        files = dt.files;
        return _this.handleFile(files[0]);
      };
    })(this);
    dropbox.addEventListener("dragover", dragover, false);
    return dropbox.addEventListener("drop", drop, false);
  };

  ObjectPickerPhotoURL.prototype.handleScroll = function(e) {
    var b;
    b = b + 3;
    return console.log(this.target);
  };

  ObjectPickerPhotoURL.prototype.validateDblClick = function(e) {
    if (e.target.nodeName !== "IMG") {
      return;
    }
    if (this.config.singleSelection) {
      if (typeof this.state.selected[e.target.id] !== 'object') {
        this.toggleClicked(e.target);
      }
      return this.showCropingTool();
    } else {

    }
  };

  ObjectPickerPhotoURL.prototype.validateClick = function(e) {
    var el;
    el = e.target;
    if (el.nodeName !== "IMG") {
      return;
    }
    return this.toggleClicked(el);
  };

  ObjectPickerPhotoURL.prototype.toggleClicked = function(el) {
    var currentID, i, id, thumb, _ref, _results;
    id = el.id;
    if (this.config.singleSelection) {
      currentID = this.getSelectedID();
      if (currentID === id) {
        return;
      }
      this.toggleOne(el, id);
      _ref = this.state.selected;
      _results = [];
      for (i in _ref) {
        thumb = _ref[i];
        if (i !== id) {
          if (typeof thumb === 'object') {
            $(thumb.el).removeClass('selected');
            this.state.selected[i] = false;
            _results.push(this.state.selected_n -= 1);
          } else {
            _results.push(void 0);
          }
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    } else {
      return this.toggleOne(el, id);
    }
  };

  ObjectPickerPhotoURL.prototype.selectFirstThumb = function() {
    return this.toggleClicked(this.thumbs$.firstChild);
  };

  ObjectPickerPhotoURL.prototype.selectNextThumb = function() {
    var nextThumb, thumb;
    thumb = this.getSelectedThumb();
    if (thumb === null) {
      return;
    }
    nextThumb = thumb.nextElementSibling;
    if (nextThumb) {
      return this.toggleClicked(nextThumb);
    }
  };

  ObjectPickerPhotoURL.prototype.selectPreviousThumb = function() {
    var prevThumb, thumb;
    thumb = this.getSelectedThumb();
    if (thumb === null) {
      return;
    }
    prevThumb = thumb.previousElementSibling;
    if (prevThumb) {
      return this.toggleClicked(prevThumb);
    }
  };

  ObjectPickerPhotoURL.prototype.selectThumbUp = function() {
    var firstThumb, prevThumb, thumb, x;
    thumb = this.getSelectedThumb();
    if (thumb === null) {
      return;
    }
    x = thumb.x;
    prevThumb = thumb.previousElementSibling;
    while (prevThumb) {
      if (prevThumb.x === x) {
        this.toggleClicked(prevThumb);
        return;
      }
      prevThumb = prevThumb.previousElementSibling;
    }
    firstThumb = thumb.parentElement.firstChild;
    if (firstThumb !== thumb) {
      return this.toggleClicked(firstThumb);
    }
  };

  ObjectPickerPhotoURL.prototype.selectThumbDown = function() {
    var lastThumb, nextThumb, thumb, x;
    thumb = this.getSelectedThumb();
    if (thumb === null) {
      return;
    }
    x = thumb.x;
    nextThumb = thumb.nextElementSibling;
    while (nextThumb) {
      if (nextThumb.x === x) {
        this.toggleClicked(nextThumb);
        return;
      }
      nextThumb = nextThumb.nextElementSibling;
    }
    lastThumb = thumb.parentElement.lastChild;
    if (lastThumb !== thumb) {
      return this.toggleClicked(lastThumb);
    }
  };

  ObjectPickerPhotoURL.prototype.toggleOne = function(thumbEl, id) {
    if (typeof this.state.selected[id] === 'object') {
      $(thumbEl).removeClass('selected');
      this.state.selected[id] = false;
      return this.state.selected_n -= 1;
    } else {
      $(thumbEl).addClass('selected');
      this.state.selected[id] = {
        id: id,
        name: "",
        el: thumbEl
      };
      return this.state.selected_n += 1;
    }
  };

  ObjectPickerPhotoURL.prototype.getSelectedID = function() {
    var k, val, _ref;
    _ref = this.state.selected;
    for (k in _ref) {
      val = _ref[k];
      if (typeof val === 'object') {
        return k;
      }
    }
    return null;
  };

  ObjectPickerPhotoURL.prototype.getSelectedThumb = function() {
    var k, val, _ref;
    _ref = this.state.selected;
    for (k in _ref) {
      val = _ref[k];
      if (typeof val === 'object') {
        return val.el;
      }
    }
    return null;
  };

  ObjectPickerPhotoURL.prototype.onYes = function() {
    var d, r, s;
    if (this.state.currentStep === 'photoPicker') {
      if (this.state.selected_n === 1) {
        this.showCropingTool();
      } else {
        return false;
      }
    } else {
      s = this.imgPreview.style;
      r = this.state.img_naturalW / this.imgPreview.width;
      d = {
        sx: Math.round(-parseInt(s.marginLeft) * r),
        sy: Math.round(-parseInt(s.marginTop) * r),
        sWidth: Math.round(this.config.target_h * r),
        sHeight: Math.round(this.config.target_w * r)
      };
      this.close();
      this.cb(true, this.getResultDataURL(this.imgPreview, d));
    }
    console.log('onKeyStroke', e.which, this.sourceType);
    if (this.state.currentStep === 'croper') {
      if (e.which === 27) {
        e.stopPropagation();
        this.chooseAgain();
      } else if (e.which === 13) {
        e.stopPropagation();
        this.onYes();
        return;
      } else {
        return;
      }
    } else {
      switch (this.sourceType) {
        case 'thumbPicker':
          if (this.thumbPickerKeyHandler(e)) {
            ObjectPickerPhotoURL.__super__.onYes.call(this, e);
          }
          break;
        case 'photoUpload':
          if (this.photoUploadKeyHandler(e)) {
            ObjectPickerPhotoURL.__super__.onYes.call(this, e);
          }
          break;
        case 'urlPhotoUpload':
          if (this.urlPhotoUploadKeyHandler(e)) {
            ObjectPickerPhotoURL.__super__.onYes.call(this, e);
          }
      }
    }
  };

  ObjectPickerPhotoURL.prototype.changePhotoFromUpload = function() {
    this.uploadPopupOpened = true;
    return this.uploader.click();
  };

  ObjectPickerPhotoURL.prototype.handleUploaderChange = function() {
    var file;
    file = this.uploader.files[0];
    return this.handleFile(file);
  };

  ObjectPickerPhotoURL.prototype.handleFile = function(file) {
    var img, reader;
    console.log("handleFile");
    if (!file.type.match(/image\/.*/)) {
      return alert(t('This is not an image'));
    }
    reader = new FileReader();
    img = new Image();
    reader.readAsDataURL(file);
    return reader.onloadend = (function(_this) {
      return function() {
        return _this.showCropingTool(reader.result);
      };
    })(this);
  };

  ObjectPickerPhotoURL.prototype.getResultDataURL = function(img, dimensions) {
    var IMAGE_DIMENSION, canvas, ctx, d, dataUrl;
    IMAGE_DIMENSION = 600;
    canvas = document.createElement('canvas');
    canvas.height = canvas.width = IMAGE_DIMENSION;
    ctx = canvas.getContext('2d');
    if (dimensions != null) {
      d = dimensions;
      ctx.drawImage(img, d.sx, d.sy, d.sWidth, d.sHeight, 0, 0, IMAGE_DIMENSION, IMAGE_DIMENSION);
    }
    return dataUrl = canvas.toDataURL('image/jpeg');
  };

  ObjectPickerPhotoURL.prototype.onKeyStroke = function(e) {
    console.log('onKeyStroke', e.which, this.sourceType);
    if (this.state.currentStep === 'croper') {
      if (e.which === 27) {
        e.stopPropagation();
        this.chooseAgain();
      } else if (e.which === 13) {
        e.stopPropagation();
        this.onYes();
        return;
      } else {
        return;
      }
    } else {
      switch (this.sourceType) {
        case 'thumbPicker':
          if (this.thumbPickerKeyHandler(e)) {
            ObjectPickerPhotoURL.__super__.onKeyStroke.call(this, e);
          }
          break;
        case 'photoUpload':
          if (this.photoUploadKeyHandler(e)) {
            ObjectPickerPhotoURL.__super__.onKeyStroke.call(this, e);
          }
          break;
        case 'urlPhotoUpload':
          if (this.urlPhotoUploadKeyHandler(e)) {
            ObjectPickerPhotoURL.__super__.onKeyStroke.call(this, e);
          }
      }
    }
  };

  ObjectPickerPhotoURL.prototype.thumbPickerKeyHandler = function(e) {
    console.log('thumbPickerKeyHandler', e.which);
    switch (e.which) {
      case 27:
        return true;
      case 13:
        e.stopPropagation();
        this.onYes();
        break;
      case 39:
        e.stopPropagation();
        this.selectNextThumb();
        break;
      case 37:
        e.stopPropagation();
        this.selectPreviousThumb();
        break;
      case 38:
        e.stopPropagation();
        this.selectThumbUp();
        break;
      case 40:
        e.stopPropagation();
        this.selectThumbDown();
        break;
      default:
        return false;
    }
    return false;
  };

  ObjectPickerPhotoURL.prototype.photoUploadKeyHandler = function(e) {
    console.log('photoUploadKeyHandler', e.which);
    switch (e.which) {
      case 27:
        if (this.uploadPopupOpened) {
          this.uploadPopupOpened = false;
          e.stopPropagation();
        } else {
          return true;
        }
        break;
      default:
        return false;
    }
    return false;
  };

  ObjectPickerPhotoURL.prototype.urlPhotoUploadKeyHandler = function(e) {
    console.log('urlPhotoUploadKeyHandler', e.which);
    switch (e.which) {
      case 27:
        return true;
      case 13:
        e.stopPropagation();
        this.onYes();
        break;
      default:
        return false;
    }
    return false;
  };

  ObjectPickerPhotoURL.prototype.addPage = function(skip, limit) {
    return Photo.listFromFiles(skip, limit, this.listFromFiles_cb);
  };

  ObjectPickerPhotoURL.prototype.listFromFiles_cb = function(err, body) {
    var btn, files, hasNext, pathToSocketIO, socket;
    if ((body != null ? body.files : void 0) != null) {
      files = body.files;
    }
    if (err) {
      return console.log(err);
    } else if (body.percent != null) {
      this.state.percent = body.percent;
      pathToSocketIO = "" + (window.location.pathname.substring(1)) + "socket.io";
      socket = io.connect(window.location.origin, {
        resource: pathToSocketIO
      });
      return socket.on('progress', (function(_this) {
        return function(event) {
          _this.state.percent = event.percent;
          if (_this.state.percent === 100) {

          } else {

          }
        };
      })(this));
    } else if ((files != null) && Object.keys(files).length === 0) {
      this.thumbs$.innerHTML = "<p style='margin-top:20px'>" + (t('no image')) + "</p>";
      btn = this.thumbs$.parentElement.children[1];
      return btn.parentElement.removeChild(btn);
    } else {
      if ((body != null ? body.hasNext : void 0) != null) {
        hasNext = body.hasNext;
      } else {
        hasNext = false;
      }
      this.addThumbs(body.files, hasNext);
      if (this.config.singleSelection && this.state.selected_n === 0) {
        return this.selectFirstThumb();
      }
    }
  };

  ObjectPickerPhotoURL.prototype.addThumbs = function(files, hasNext) {
    var frag, img, p, s, _i, _len;
    if (!hasNext) {
      this.nextBtn.style.display = 'none';
    }
    frag = document.createDocumentFragment();
    s = '';
    for (_i = 0, _len = files.length; _i < _len; _i++) {
      p = files[_i];
      img = new Image();
      img.src = "files/thumbs/" + p.id + ".jpg";
      img.id = "" + p.id;
      img.title = "" + p.name;
      frag.appendChild(img);
    }
    return this.thumbs$.appendChild(frag);
  };

  ObjectPickerPhotoURL.prototype.displayMore = function() {
    this.addPage(this.state.skip, this.config.numPerPage);
    return this.state.skip += this.config.numPerPage;
  };

  ObjectPickerPhotoURL.prototype.showCropingTool = function(dataUrl) {
    var screenUrl;
    this.state.currentStep = 'croper';
    this.currentPhotoScroll = this.body.scrollTop;
    this.objectPickerCont.style.display = 'none';
    this.cropper$.style.display = '';
    if (dataUrl) {
      screenUrl = dataUrl;
    } else {
      screenUrl = "files/screens/" + (this.getSelectedID()) + ".jpg";
    }
    this.imgToCrop.src = screenUrl;
    return this.imgPreview.src = screenUrl;
  };

  ObjectPickerPhotoURL.prototype.onImgToCropLoaded = function() {
    var img_h, img_w, options, selection_w, t, x, y;
    img_w = this.imgToCrop.width;
    img_h = this.imgToCrop.height;
    this.img_w = img_w;
    this.img_h = img_h;
    this.state.img_naturalW = this.imgToCrop.naturalWidth;
    this.state.img_naturalH = this.imgToCrop.naturalHeight;
    selection_w = Math.round(Math.min(img_h, img_w) * 1);
    x = Math.round((img_w - selection_w) / 2);
    y = Math.round((img_h - selection_w) / 2);
    options = {
      onChange: this.updateCropedPreview,
      onSelect: this.updateCropedPreview,
      aspectRatio: 1,
      setSelect: [x, y, x + selection_w, y + selection_w]
    };
    t = this;
    $(this.imgToCrop).Jcrop(options, function() {
      return t.jcrop_api = this;
    });
    return t.jcrop_api.focus();
  };

  ObjectPickerPhotoURL.prototype.updateCropedPreview = function(coords) {
    var prev_h, prev_w, prev_x, prev_y, s;
    prev_w = this.img_w / coords.w * this.config.target_w;
    prev_h = this.img_h / coords.h * this.config.target_h;
    prev_x = this.config.target_w / coords.w * coords.x;
    prev_y = this.config.target_h / coords.h * coords.y;
    s = this.imgPreview.style;
    s.width = Math.round(prev_w) + 'px';
    s.height = Math.round(prev_h) + 'px';
    s.marginLeft = '-' + Math.round(prev_x) + 'px';
    s.marginTop = '-' + Math.round(prev_y) + 'px';
    return true;
  };

  ObjectPickerPhotoURL.prototype.chooseAgain = function() {
    this.state.currentStep = 'photoPicker';
    this.jcrop_api.destroy();
    this.imgToCrop.removeAttribute('style');
    this.imgToCrop.src = '';
    this.objectPickerCont.style.display = '';
    this.cropper$.style.display = 'none';
    return this.body.scrollTop = this.currentPhotoScroll;
  };

  ObjectPickerPhotoURL.prototype.bindTabs = function() {
    var tablists;
    tablists = document.querySelectorAll('[role=tablist]');
    return Array.prototype.forEach.call(tablists, function(tablist) {
      var panelList;
      panelList = tablist.getAttribute('aria-controls');
      panelList = document.querySelector("." + panelList);
      return tablist.addEventListener('click', (function(_this) {
        return function(event) {
          var pan, panel, panelSelect, tab, _i, _j, _len, _len1, _ref, _ref1, _results;
          if (event.target.getAttribute('role') !== 'tab') {
            return;
          }
          panel = event.target.getAttribute('aria-controls');
          panel = panelList.querySelector("." + panel);
          _ref = panelList.children;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            pan = _ref[_i];
            if (pan.getAttribute('role') !== 'tabpanel') {
              continue;
            }
            if (pan !== panel) {
              pan.setAttribute('aria-hidden', true);
            } else {
              pan.setAttribute('aria-hidden', false);
              panelSelect = document.createEvent('CustomEvent');
              panelSelect.initCustomEvent('panelSelect', true, false);
              pan.dispatchEvent(panelSelect);
            }
          }
          _ref1 = tablist.querySelectorAll('[role=tab]');
          _results = [];
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            tab = _ref1[_j];
            if (tab === event.target) {
              _results.push(event.target.setAttribute('aria-selected', true));
            } else {
              _results.push(tab.setAttribute('aria-selected', false));
            }
          }
          return _results;
        };
      })(this));
    });
  };

  ObjectPickerPhotoURL.prototype.listenTabsSelection = function() {
    return this.objectPickerCont.addEventListener('panelSelect', (function(_this) {
      return function(event) {
        return _this.activateSourceType(event.target.className);
      };
    })(this));
  };

  ObjectPickerPhotoURL.prototype.selectDefaultTab = function(panelClassName) {
    return this.tablist.querySelector("[aria-controls=" + panelClassName + "]").click();
  };

  ObjectPickerPhotoURL.prototype.activateSourceType = function(sourceType) {
    return this.sourceType = sourceType;
  };

  return ObjectPickerPhotoURL;

})();
