// Generated by CoffeeScript 1.8.0
var AppManager, Application, applicationTimeout, mark_broken, start_timeout, stop_app;

Application = require('../models/application');

AppManager = require("../lib/paas").AppManager;

applicationTimeout = [];

mark_broken = function(app, err) {
  app.state = "broken";
  app.password = null;
  app.errormsg = err.message;
  return app.save(function(saveErr) {
    if (saveErr) {
      return send_error(saveErr);
    }
  });
};

stop_app = function(app) {
  var manager;
  manager = new AppManager;
  return manager.stop(app, (function(_this) {
    return function(err, result) {
      var data;
      if (err) {
        return mark_broken(app, err);
      }
      data = {
        state: "stopped",
        port: 0
      };
      return app.updateAttributes(data, function(err) {
        if (err) {
          return send_error(err);
        }
        return manager.resetProxy(function(err) {
          if (err) {
            return mark_broken(app, err);
          }
        });
      });
    };
  })(this));
};

start_timeout = function(name) {
  return applicationTimeout[name] = setTimeout(function() {
    if (name !== "home" && name !== "proxy") {
      return Application.all(function(err, apps) {
        var app, _i, _len, _results;
        _results = [];
        for (_i = 0, _len = apps.length; _i < _len; _i++) {
          app = apps[_i];
          if (app.name === name && app.isStoppable) {
            console.log("stop : " + name);
            _results.push(stop_app(app));
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      });
    }
  }, 180000);
};

module.exports.restartTimeout = function(name) {
  if (applicationTimeout[name] != null) {
    clearTimeout(applicationTimeout[name]);
  }
  return start_timeout(name);
};

module.exports.init = function() {
  return Application.all(function(err, apps) {
    var app, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = apps.length; _i < _len; _i++) {
      app = apps[_i];
      if (app.state === 'installed' && app.isStoppable) {
        _results.push(start_timeout(app.name));
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  });
};
